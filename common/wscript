#! /usr/bin/env python
# encoding: utf-8

import glob
import os
import ntpath
import sys
import subprocess
import string

def run_command(Cmd, Arg):
    p = subprocess.Popen([Cmd, Arg], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    out, err = p.communicate()
    return out.rstrip('\r\n')

def run_test(ctx):
    sys.path.append(ctx.top_dir)
    import waf_tools

    waf_tools.run_tests(ctx)

def configure(cfg):

    cfg.env.append_value('LIB',['leveldb'])

    if cfg.env.with_unittest:
        cfg.env.append_value('LIB',['gtest'])

    #system lib
    cfg.env.append_value('LIB',['ssl','crypto','dl','z', 'pthread'])

    # boost lib
    cfg.env.append_value('LIB',['boost_system','boost_filesystem','boost_date_time','boost_serialization'])

def build(bld):
    
    sys.path.append(bld.top_dir)
    import waf_tools

    IncludePaths = waf_tools.get_module_include_dirs(bld,'common')
    IncludePaths.append('include')

    #Build the static library
    # find all .cpp files ( exclude unit tests )
    sources_files =  bld.path.ant_glob('**/*.cpp',excl=['**/test_*.cpp'])
    bld.stlib( source = sources_files, target="common", use="BOOST", includes=IncludePaths )

    #Unit test related stuff
    
    if bld.env.with_unittest:
        waf_tools.build_tests(bld, "common", IncludePaths)


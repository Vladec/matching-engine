syntax = "proto2";

package protocol;


message NewOrder
{
	required uint64 client_order_id = 1;
	required string instrument_id   = 2;
	
	enum OrderType
	{
		MARKET = 0;
		LIMIT  = 1;
	}
	
	optional OrderType order_type = 3 [default = LIMIT];
	
	enum TimeQualifier
	{
		DAY = 0;
		IOC = 1;
		FOK = 2;
	}
	
	optional TimeQualifier time_qualifier = 4  [default = DAY];
	
	enum Side
	{
		BUY = 0;
		SELL = 1;
	}
	
	required Side side = 5;
	
	required uint32 order_quantity = 6;
	required double limit_price    = 7;
}

message Logon
{
	required string user_name    = 1;
	required string password  	 = 2;
	optional string new_password = 3;
}

message LogonReply
{
	required uint32 reject_code = 1;
}

message Logout
{
	required string reason = 1;
}

message Hearbeat
{}

message ModOrder
{
	required uint64 client_order_id = 1;
	required uint64 order_id 	    = 2;
	required string instrument_id   = 3;
	required int32  order_quantity  = 4;
	required double limit_price     = 5;
}

message CanOrder
{
	required uint64 client_order_id = 1;
	required uint64 order_id 	    = 2;
	required string instrument_id   = 3;
}

message ExecutionReport
{
	required uint64 execution_id 	= 1;
	required uint64 client_order_id = 2;
	required uint64 order_id 		= 3;

	enum ExecType
	{
		EXECTYPE_NEW = 0;
		EXECTYPE_CANCELLED = 1;
		EXECTYPE_REPLACED = 2;
		EXECTYPE_REJECTED = 3;
		EXECTYPE_TRADE = 4;
	}

	required ExecType exec_type     = 4;

	enum OrderStatus
	{
		ORDERSTATUS_NEW = 1;
		ORDERSTATUS_PARTIALLY_FILLED = 2;
		ORDERSTATUS_FILLED = 3;
		ORDERSTATUS_CANCELLED = 4;
		ORDERSTATUS_EXPIRED = 5;
		ORDERSTATUS_REJECTED = 6;
		ORDERSTATUS_SUSPENDED = 7;
	}

	required OrderStatus order_status = 5;
	required uint32 reject_code       = 6;

	optional double executed_price = 7;
	optional uint32 order_quantity = 8;
	optional uint64 trade_match_id = 9;
 	required string instrument_id  = 10;

	// TODO : Find a way to put side in commons

	enum TradeLiquidityIndicator
	{
		TLI_ADDED_LIQUIDITY = 0;
		TLI_REMOVED_LIQUIDITY = 1;
		TLI_AUCTION = 2;
	}

	required TradeLiquidityIndicator trade_liquidity_indocator = 11;

}

message OneMessage
{
	enum Type
	{
		NEW_ORDER 	     = 0;
		MOD_ORDER 		 = 1;
		CAN_ORDER 	   	 = 2;
		LOGON 	    	 = 3;
		LOGON_REPLY      = 4;
		LOGOUT 		     = 5;
		HEARTBEAT 		 = 6;
		EXECUTION_REPORT = 7;
	}
	
	required Type 	  		 type 				  = 1;
	
	optional NewOrder 		 new_order_msg 		  = 2;
	optional ModOrder 	 	 mod_order_msg 	 	  = 3;
	optional CanOrder 		 can_order_msg 		  = 4;
	optional Logon 	    	 logon_msg 			  = 5;
	optional LogonReply 	 logon_reply_msg 	  = 6;
	optional Logout 		 logout_msg 		  = 7;
	optional Hearbeat 		 heartbeat_msg 		  = 8;
	optional ExecutionReport execution_report_msg = 9;
}
